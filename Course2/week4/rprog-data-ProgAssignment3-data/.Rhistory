#Actually I set parameters as a = 0.00015, b = 0.00025, c = 5e-05, d = 1000
#in the sample dataset. OK, can we correctly estimate these parameters with
#ruling out a nonlinear trend?
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####
## Download file
url <- "https://raw.githubusercontent.com/ozt-ca/tjo.hatenablog.samples/master/r_samples/public_lib/jp/hb_trend_nonlinear.txt"
download.file(url, "data.txt")
#####
## File to dataframe: import data
d <- read_tsv("data.txt")
#check y, x1, x2, x3
par(mfrow=c(4,1))
plot(d$y, type='l', lwd=3, col='red')
plot(d$x1, type='l', lwd=1.5)
plot(d$x2, type='l', lwd=1.5)
plot(d$x3, type='l', lwd=1.5)
#Linear model fails miserably...
par(mfrow=c(1,1))
d.lm <- lm(y~.,d)
matplot(cbind(d$y, predict(d.lm, d[,-4])), type='l', lty = 1, lwd = 3, col=c(1,2))
#Lets use a Bayesian model, using a second-order difference trend. Why?
#Check the ACF of lagged difference, and PACF:
Acf(diff(d$y, lag=1))
pacf(d$y)
#####
#Model: d(t) = Q(t) + Sum(Trend(t))
# (trend(t) - trend(t-1)) - (trend(t-1) - trend(t-2)) = Error(t)
#Q(t) = ax1+bx2+cx3+d+Error(t)
#Lets use Stan...
library(rstan)
library(shinystan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
dat<-list(N=100,x1=d$x1,x2=d$x2,x3=d$x3,y=d$y)
fit1<-stan(file='hb_ts1.stan',
data=dat,iter=1000,chains=4)
#launch_shinystan(fit1)
#####
#Compare data vs prediction:
fit1.smp<-extract(fit1)
dens_a<-density(fit1.smp$a)
dens_b<-density(fit1.smp$b)
dens_c<-density(fit1.smp$c)
dens_d<-density(fit1.smp$d)
a_est<-dens_a$x[dens_a$y==max(dens_a$y)]
b_est<-dens_b$x[dens_b$y==max(dens_b$y)]
c_est<-dens_c$x[dens_c$y==max(dens_c$y)]
d_est<-dens_d$x[dens_d$y==max(dens_d$y)]
trend_est<-rep(0,100)
for (i in 1:100) {
tmp<-density(fit1.smp$trend[,i])
trend_est[i]<-tmp$x[tmp$y==max(tmp$y)]
}
pred<-a_est*d$x1+b_est*d$x2+c_est*d$x3+d_est+cumsum(trend_est)
par(mfrow=c(1,1))
matplot(cbind(d$y,pred),type='l',lty=1,lwd=c(2,3),col=c(1,2))
legend('topleft',legend=c('Data','Predicted'),col=c(1,2),lty=1,lwd=3,ncol=2,cex=1.5)
print(a_est)
print(b_est)
print(c_est)
print(d_est)
summary(fit1, pars = c("a", "b", "c", "d"), probs = c(0.1, 0.9))$summary
summary(fit1, pars = c("a", "b", "c", "d"))$summary
rankall <- function(outcome_name, num = "best") {
## Read outcome data
outcome <- read.csv('outcome-of-care-measures.csv', colClasses = "character")
## Check that state and outcome are valid
possible_out <- c('heart attack' = 11, 'heart failure' = 17, 'pneumonia' = 23)
if(!any(names(possible_out) == outcome_name))
stop("invalid outcome")
## For each state, find the hospital of the given rank
out_df <- data.frame(matrix(nrow = 0, ncol = 2))
names(out_df) <- c("hospital", "state")
for(st in sort(unique(outcome$State))) {
filtered <- outcome[outcome$State == st,]
sorted <- filtered[order(as.numeric(filtered[,possible_out[outcome_name]]),
filtered[,2],
na.last = NA),2]
if(num=='best')
out <- sorted[1]
else if (num=='worst')
out <- sorted[length(sorted)]
else if (num > length(sorted))
out <- NA
else
out <- sorted[num]
temp <- data.frame(out, st)
names(temp) <- names(out_df)
out_df <- rbind(out_df, temp)
}
rownames(out_df) <- out_df$state
out_df
}
rankhospital <- function(state, outcome_name, num = "best") {
## Read outcome data
outcome <- read.csv('outcome-of-care-measures.csv', colClasses = "character")
## Check that state and outcome are valid
possible_out <- c('heart attack' = 11, 'heart failure' = 17, 'pneumonia' = 23)
if(!any(outcome$State == state))
stop("invalid state")
if(!any(names(possible_out) == outcome_name))
stop("invalid outcome")
## Return hospital name in that state with the given rank
## 30-day death rate
filtered <- outcome[outcome$State == state,]
sorted <- filtered[order(as.numeric(filtered[,possible_out[outcome_name]]),
filtered[,2],
na.last = NA),2]
if(num=='best')
out <- sorted[1]
else
if (num=='worst')
out <- sorted[length(sorted)]
else
if (num > length(sorted))
out <- NA
else
out <- sorted[num]
out
}
best <- function(state, outcome_name) {
#Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
#Check that state, outcome are valid
possible_out <- c('heart attack' = 11, 'heart failure' = 17, 'pneumonia' = 23)
if(!any(outcome$State == state))
stop("invalid state")
if(!any(names(possible_out) == outcome_name))
stop("invalid outcome")
filtered <- outcome[outcome$State == state,]
filtered[order(filtered[,possible_out[outcome_name]], decreasing = F),2][1]
}
best("SC", "heart attack")
setwd("~/coursera_classes/DS_JHU/Course2/week4/rprog-data-ProgAssignment3-data")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
r
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
best("NY", "pneumonia")
best <- function(state, outcome_name) {
#Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
#Check that state, outcome are valid
possible_out <- c('heart attack' = 11, 'heart failure' = 17, 'pneumonia' = 23)
if(!any(outcome$State == state))
stop("invalid state")
if(!any(names(possible_out) == outcome_name))
stop("invalid outcome")
filtered <- outcome[outcome$State == state,]
filtered[order(as.numeric(filtered[,possible_out[outcome_name]]), decreasing = F),2][1]
}
best("NY", "pneumonia")
best("SC", "heart attack")
best("AK", "pneumonia")
quit()
